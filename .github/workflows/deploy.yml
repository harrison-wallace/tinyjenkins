# IMPORTANT: Do not remove or modify the 'name', 'on', and 'jobs' keys at the top level,
# as they are required for GitHub Actions workflow validation. Only edit within the 'steps' section.
name: Deploy Jenkins
on:
  push:
    branches: [ main ]
jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    - name: Verify S3 Bucket
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.TF_VAR_region }}
      run: |
        aws s3api head-bucket --bucket ${{ secrets.TF_VAR_state_bucket }} || { echo "S3 bucket ${{ secrets.TF_VAR_state_bucket }} not found or inaccessible"; exit 1; }
    - name: Verify Route 53 Hosted Zone
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.TF_VAR_region }}
      run: |
        aws route53 list-hosted-zones-by-name --dns-name ${{ secrets.TF_VAR_domain_name }} | grep -q "HostedZone" || { echo "Route 53 hosted zone for ${{ secrets.TF_VAR_domain_name }} not found"; exit 1; }
    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform init -backend-config="bucket=${{ secrets.TF_VAR_state_bucket }}" -backend-config="region=${{ secrets.TF_VAR_region }}"
    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_domain_name: ${{ secrets.TF_VAR_domain_name }}
        TF_VAR_state_bucket: ${{ secrets.TF_VAR_state_bucket }}
        TF_VAR_region: ${{ secrets.TF_VAR_region }}
        TF_VAR_key_name: ${{ secrets.TF_VAR_key_name }}
        TF_VAR_allowed_cidr: ${{ secrets.TF_VAR_allowed_cidr }}
        TF_VAR_alert_email: ${{ secrets.TF_VAR_alert_email }}
        TF_LOG: DEBUG
      timeout-minutes: 5
      run: terraform plan -out=tfplan -no-color
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_domain_name: ${{ secrets.TF_VAR_domain_name }}
        TF_VAR_state_bucket: ${{ secrets.TF_VAR_state_bucket }}
        TF_VAR_region: ${{ secrets.TF_VAR_region }}
        TF_VAR_key_name: ${{ secrets.TF_VAR_key_name }}
        TF_VAR_allowed_cidr: ${{ secrets.TF_VAR_allowed_cidr }}
        TF_VAR_alert_email: ${{ secrets.TF_VAR_alert_email }}
      run: terraform apply -auto-approve tfplan
    - name: Mask Sensitive Outputs
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        echo "::add-mask::$(terraform output -raw jenkins_url)"
        echo "::add-mask::${{ secrets.TF_VAR_domain_name }}"
    - name: Verify Instance Exists
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.TF_VAR_region }}
      run: |
        aws ec2 describe-instances --filters "Name=tag:Name,Values=Jenkins-Spot" --query 'Reservations[].Instances[].{InstanceId:InstanceId, PublicIp:PublicIpAddress, State:Name}' --output text
    - name: Wait for Instance to be Running
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.TF_VAR_region }}
      run: |
        aws ec2 wait instance-running --filters "Name=tag:Name,Values=Jenkins-Spot"
    - name: Copy Ansible Playbooks
      env:
        EC2_IP: $(aws ec2 describe-instances --filters "Name=tag:Name,Values=Jenkins-Spot" --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
        SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.TF_VAR_region }}
      run: |
        if [ -z "$EC2_IP" ]; then
          echo "No public IP found for instance with tag Name=Jenkins-Spot"
          exit 1
        fi
        echo "$SSH_KEY" > key.pem
        chmod 600 key.pem
        # Wait for SSH to be available
        until ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@$EC2_IP "exit"; do
          sleep 5
        done
        # Copy playbooks
        scp -o StrictHostKeyChecking=no -i key.pem -r ansible/playbooks ec2-user@$EC2_IP:/home/ec2-user/
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@$EC2_IP "sudo mv /home/ec2-user/playbooks /etc/ansible/ && sudo ansible-playbook /etc/ansible/jenkins.yml"