name: Deploy Jenkins
on:
  push:
    branches: [ main ]
jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    - name: Verify S3 Bucket
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.TF_VAR_REGION }}
      run: |
        aws s3api head-bucket --bucket ${{ secrets.TF_VAR_STATE_BUCKET }} || { echo "S3 bucket ${{ secrets.TF_VAR_STATE_BUCKET }} not found or inaccessible"; exit 1; }
    - name: Verify Route 53 Hosted Zone
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.TF_VAR_REGION }}
      run: |
        aws route53 list-hosted-zones-by-name --dns-name ${{ secrets.TF_VAR_DOMAIN_NAME }} | grep -q "HostedZone" || { echo "Route 53 hosted zone for ${{ secrets.TF_VAR_DOMAIN_NAME }} not found"; exit 1; }
    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform init -backend-config="bucket=${{ secrets.TF_VAR_STATE_BUCKET }}" -backend-config="region=${{ secrets.TF_VAR_REGION }}"
    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_DOMAIN_NAME: ${{ secrets.TF_VAR_DOMAIN_NAME }}
        TF_VAR_STATE_BUCKET: ${{ secrets.TF_VAR_STATE_BUCKET }}
        TF_VAR_REGION: ${{ secrets.TF_VAR_REGION }}
        TF_VAR_KEY_NAME: ${{ secrets.TF_VAR_KEY_NAME }}
        TF_VAR_ALLOWED_CIDR: ${{ secrets.TF_VAR_ALLOWED_CIDR }}
        TF_VAR_ALERT_EMAIL: ${{ secrets.TF_VAR_ALERT_EMAIL }}
        TF_VAR_ENABLE_HTTPS: ${{ secrets.TF_VAR_ENABLE_HTTPS }}
        TF_VAR_ENABLE_DYNAMIC_DNS: ${{ secrets.TF_VAR_ENABLE_DYNAMIC_DNS }}
        TF_LOG: DEBUG
      timeout-minutes: 5
      run: terraform plan -out=tfplan -no-color
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_DOMAIN_NAME: ${{ secrets.TF_VAR_DOMAIN_NAME }}
        TF_VAR_STATE_BUCKET: ${{ secrets.TF_VAR_STATE_BUCKET }}
        TF_VAR_REGION: ${{ secrets.TF_VAR_REGION }}
        TF_VAR_KEY_NAME: ${{ secrets.TF_VAR_KEY_NAME }}
        TF_VAR_ALLOWED_CIDR: ${{ secrets.TF_VAR_ALLOWED_CIDR }}
        TF_VAR_ALERT_EMAIL: ${{ secrets.TF_VAR_ALERT_EMAIL }}
        TF_VAR_ENABLE_HTTPS: ${{ secrets.TF_VAR_ENABLE_HTTPS }}
        TF_VAR_ENABLE_DYNAMIC_DNS: ${{ secrets.TF_VAR_ENABLE_DYNAMIC_DNS }}
      run: terraform apply -auto-approve tfplan
    - name: Mask Sensitive Outputs
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        echo "::add-mask::$(terraform output -raw jenkins_url)"
        echo "::add-mask::${{ secrets.TF_VAR_DOMAIN_NAME }}"
    - name: Verify Jenkins Availability
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.TF_VAR_REGION }}
        TF_VAR_DOMAIN_NAME: ${{ secrets.TF_VAR_DOMAIN_NAME }}
        TF_VAR_ENABLE_HTTPS: ${{ secrets.TF_VAR_ENABLE_HTTPS }}
      timeout-minutes: 15
      run: |
        # Determine protocol based on enable_https
        PROTOCOL="http"
        PORT=":8080"
        if [ "${TF_VAR_ENABLE_HTTPS}" = "true" ]; then
          PROTOCOL="https"
          PORT=""
        fi

        # Get the current instance IP from ASG
        INSTANCE_IP=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=Jenkins-Spot" "Name=instance-state-name,Values=running" \
          --query "Reservations[0].Instances[0].PublicIpAddress" \
          --output text --region ${AWS_REGION} 2>/dev/null || echo "")

        # Use DNS by default, fallback to IP if available
        JENKINS_URL="${PROTOCOL}://jenkins.${TF_VAR_DOMAIN_NAME}${PORT}"
        if [ -n "$INSTANCE_IP" ]; then
          JENKINS_URL="${PROTOCOL}://${INSTANCE_IP}${PORT}"
        fi

        echo "Checking Jenkins availability at $JENKINS_URL"
        echo "Note: DNS propagation may take up to 300 seconds."

        # Retry check for up to 5 minutes
        for i in {1..30}; do
          if curl -s --head "$JENKINS_URL" | grep -E "200 OK|403 Forbidden"; then
            echo "Jenkins is available"
            exit 0
          fi
          echo "Attempt $i: Jenkins not yet available, retrying in 10 seconds..."
          sleep 10
        done
        echo "Failed to reach Jenkins after 5 minutes"
        exit 1