name: Deploy Jenkins
on:
  push:
    branches: [ main ]
jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0
    - name: Verify S3 Bucket
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.TF_VAR_region }}
      run: |
        aws s3api head-bucket --bucket ${{ secrets.TF_VAR_state_bucket }} || { echo "S3 bucket ${{ secrets.TF_VAR_state_bucket }} not found or inaccessible"; exit 1; }
    - name: Verify Route 53 Hosted Zone
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.TF_VAR_region }}
      run: |
        aws route53 list-hosted-zones-by-name --dns-name ${{ secrets.TF_VAR_domain_name }} | grep -q "HostedZone" || { echo "Route 53 hosted zone for ${{ secrets.TF_VAR_domain_name }} not found"; exit 1; }
    - name: Terraform Init
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: terraform init -backend-config="bucket=${{ secrets.TF_VAR_state_bucket }}" -backend-config="region=${{ secrets.TF_VAR_region }}"
    - name: Terraform Plan
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_domain_name: ${{ secrets.TF_VAR_domain_name }}
        TF_VAR_state_bucket: ${{ secrets.TF_VAR_state_bucket }}
        TF_VAR_region: ${{ secrets.TF_VAR_region }}
        TF_VAR_key_name: ${{ secrets.TF_VAR_key_name }}
        TF_VAR_allowed_cidr: ${{ secrets.TF_VAR_allowed_cidr }}
        TF_VAR_alert_email: ${{ secrets.TF_VAR_alert_email }}
        TF_LOG: DEBUG
      timeout-minutes: 5
      run: terraform plan -out=tfplan -no-color
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main'
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        TF_VAR_domain_name: ${{ secrets.TF_VAR_domain_name }}
        TF_VAR_state_bucket: ${{ secrets.TF_VAR_state_bucket }}
        TF_VAR_region: ${{ secrets.TF_VAR_region }}
        TF_VAR_key_name: ${{ secrets.TF_VAR_key_name }}
        TF_VAR_allowed_cidr: ${{ secrets.TF_VAR_allowed_cidr }}
        TF_VAR_alert_email: ${{ secrets.TF_VAR_alert_email }}
      run: terraform apply -auto-approve tfplan
    - name: Mask Sensitive Outputs
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        echo "::add-mask::$(terraform output -raw jenkins_url)"
        echo "::add-mask::${{ secrets.TF_VAR_domain_name }}"
    - name: Verify Jenkins Availability
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.TF_VAR_region }}
      timeout-minutes: 15
      run: |
        # Get instance ID
        INSTANCE_ID=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=Jenkins-Spot" "Name=instance-state-name,Values=pending,running" --query 'Reservations[0].Instances[0].InstanceId' --output text --no-cli-pager)
        if [ -z "$INSTANCE_ID" ] || [ "$INSTANCE_ID" == "None" ]; then
          echo "No running or pending instance found with tag Name=Jenkins-Spot"
          exit 1
        fi
        # Get public IP
        JENKINS_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text --no-cli-pager)
        if [ -z "$JENKINS_IP" ] || [ "$JENKINS_IP" == "None" ]; then
          echo "No public IP found for instance $INSTANCE_ID"
          exit 1
        fi
        JENKINS_URL="http://$JENKINS_IP:8080"
        echo "Checking Jenkins availability at $JENKINS_URL"
        echo "Note: The DNS record for http://jenkins.${{ secrets.TF_VAR_domain_name }}:8080 may take time to propagate (up to 300 seconds or more)."
        for i in {1..90}; do
          RESPONSE=$(curl -s --head "$JENKINS_URL")
          if echo "$RESPONSE" | grep -E "200 OK|403 Forbidden"; then
            echo "Jenkins is available at $JENKINS_URL (Response: $(echo "$RESPONSE" | head -n 1))"
            echo "DNS-based URL: http://jenkins.${{ secrets.TF_VAR_domain_name }}:8080 (may require additional propagation time)"
            break
          fi
          echo "Waiting for Jenkins to be available... Attempt $i"
          sleep 10
          if [ $i -eq 90 ]; then
            echo "Jenkins not available after 15 minutes"
            echo "Last response: $RESPONSE"
            exit 1
          fi
        done